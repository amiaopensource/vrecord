#!/usr/bin/env bash

# vrecord
# Open-source software for capturing a video signal and turning it into a digital file.

VERSION="2020-08-05"
SCRIPTNAME="$(basename "${0}")"
SCRIPTDIR="$(dirname "${0}")"
CONFIG_FILE="${HOME}/.${SCRIPTNAME}.conf"
RUNTYPE="record"
SAT_OUTLIER_THRSHLD=14
AUD_OUTLIER_THRSHLD=10
BRNG_OUTLIER_THRSHLD=14

_usage(){
    cat <<EOF
${SCRIPTNAME} ${VERSION}

${SCRIPTNAME} will record a file via ffmpeg and the the Blackmagic SDK or
AVFoundation. It is an interactive script and will create 10 or 8-bit video
files.

Dependencies: cowsay, amiaopensource/amiaos/decklinksdk,
  amiaopensource/amiaos/ffmpegdecklink, amiaopensource/amiaos/gtkdialog,
  and xmlstarlet
Optional Dependencies: deckcontrol, gnuplot, mediaconch, mkvtoolnix, mpv, qcli

Usage: ${SCRIPTNAME} [ -g | -e | -r | -p | -a | -x | -v | -h ] [IDENTIFIER]

  IDENTIFIER will be used for the filenaming of the output files. It is only
  required in record mode.

  -g  use the GUI
  -e  edit the configuration file before recording
  -r  enable record mode [default]
  -p  enable passthrough mode where the video signal coming into the
      computer can be monitored, but not written to a file. Useful for
      testing equipment and setting up a tape to bars.
  -a  enable audio passthrough mode. Identical to passthrough except for
      the addition of audio bars. Note: Will eventually lag and crash if
      left on too long.
  -x  reset the configuration: this will replace the default configuration
      file at '${CONFIG_FILE}' with an empty one.
  -v  Run ffmpeg with '-loglevel debug'. Using this option creates a very
      large log file, so avoid using this option with 'Visual + Numerical'
      or any playback option that display the log as part of the view.
  -h  display this help menu

Advanced options
  -I  Provide a string of input options for the recording ffmpeg to use.
      For example "vrecord -I '-loglevel trace'" would force an ffmpeg
      logging level that is usually unaccessible via vrecord preferences.
  -O  Provide a string of output options for the recording ffmpeg to use.
  -i  Provide a file as an input to vrecord, rather than using the
      decklink device. For testing without a decklink device.
  -G  Share warnings from gtkdialog, otherwise there are suppressed by default.
  -c  Provide a recording configuration file, rather than the default one at
      '${CONFIG_FILE}'.

See also the man page: man ${SCRIPTNAME}
EOF
}

# command-line options to set media id and original variables
OPTIND=1
while getopts ":hc:erpaxgvI:O:i:G" opt ; do
    case "${opt}" in
        h) _usage ; exit 0 ;;
        c) CONFIG_FILE="${OPTARG}" ;;
        e) RUNTYPE="edit" ;;
        r) RUNTYPE="record" ;;
        p) RUNTYPE="passthrough" ;;
        a) RUNTYPE="audiopassthrough" ;;
        x) RUNTYPE="reset" ;;
        g) RUNTYPE="GUI" ; GUI=1 ;;
        v) VERBOSE="true" ;;
        I) EXTRAINPUTOPTIONS=(${OPTARG}) ;;
        O) EXTRAOUTPUTOPTIONS=(${OPTARG}) ;;
        i) ALT_INPUT="${OPTARG}" ;;
        G) VERBOSE_GTKDIALOG="Y" ;;
        :) echo "Option -${OPTARG} requires an argument" ; _usage ; exit 1 ;;
        *) echo "Error: bad option -${OPTARG}" ; _usage ; exit 1 ;;
    esac
done
shift "$((OPTIND-1))"
ID="${1}"

_parse_report(){
    KEY="${1}"
    REPORT="${2}"
    echo "${REPORT}" | grep -i "^[ ]*${KEY}:" | cut -d : -f 2- | awk '{$1=$1;print}'
}

_maketemp(){
    # moved to functions file but kept here as it is used before the function file is called
    if [[ "${1}" ]] ; then
        EXT="${1}"
    else
        EXT=""
    fi
    echo "$(mktemp -q "/tmp/$(basename "${0}").XXXXXX")${EXT}"
}

# manage an include file to pass variables to gtkdialog
VRECORD_VARS_FILE="/tmp/v_$(echo "${0}" | sed -e "s/[^A-Za-z0-9.]/_/g")_variables.txt"
_include_var(){
    while [[ "${@}" != "" ]] ; do
        VAR_NAME="${1}"
        VAR_VALUE="${!1}"
        shift
        echo "${VAR_NAME}=\"${VAR_VALUE}\"" >> "${VRECORD_VARS_FILE}"
    done
}
if [[ -f "${VRECORD_VARS_FILE}" ]] ; then
    . "${VRECORD_VARS_FILE}"
else
    _include_var VRECORD_VARS_FILE
fi

_setup_env_variables(){
    # Set variables for system differences
    QUERY_OS_TYPE="$(uname -s)"
    if [[ "${QUERY_OS_TYPE}" = "Darwin" ]] ; then
        OS_TYPE="macOS"
        if [[ $(dirname "$(command -v "${0}")") = "/usr/local/bin" ]] ; then
            if [[ -d "/usr/local/opt/vrecord" ]] ; then
                RESOURCE_PATH="/usr/local/opt/vrecord"
            else
                RESOURCE_PATH="$(brew --prefix vrecord)"
            fi
        else
            RESOURCE_PATH="${SCRIPTDIR}/Resources"
        fi
        if [[ -f "/Library/Fonts/Andale Mono.ttf" ]] ; then
            DEFAULTFONT="/Library/Fonts/Andale Mono.ttf"
        elif [[ -f "/System/Library/Fonts/Supplemental/Andale Mono.ttf" ]] ; then
            DEFAULTFONT="/System/Library/Fonts/Supplemental/Andale Mono.ttf"
        elif [[ -f "/System/Library/Fonts/Monaco.dfont" ]] ; then
            DEFAULTFONT="/System/Library/Fonts/Monaco.dfont"
        elif [[ -f "/Library/Fonts/Microsoft/Lucida Console.ttf" ]] ; then
            DEFAULTFONT="/Library/Fonts/Microsoft/Lucida\Console.ttf"
        elif [[ -f "/Library/Fonts/LetterGothicStd.otf" ]] ; then
            DEFAULTFONT="/Library/Fonts/LetterGothicStd.otf"
        else
            _report -wt "vrecord can't find a preferred font to use, please report this error to https://github.com/amiaopensource/vrecord/issues"
        fi
        HARDWARE_REPORT="$(system_profiler SPHardwareDataType)"
        COMPUTER_MODEL_NAME="$(_parse_report "Model Name" "${HARDWARE_REPORT}")"
        COMPUTER_MODEL_ID="$(_parse_report "Model Identifier" "${HARDWARE_REPORT}")"
        COMPUTER_PROCESSOR_NAME="$(_parse_report "Processor Name" "${HARDWARE_REPORT}")"
        COMPUTER_PROCESSOR_SPEED="$(_parse_report "Processor Speed" "${HARDWARE_REPORT}")"
        COMPUTER_PROCESSOR_COUNT="$(_parse_report "Number of Processors" "${HARDWARE_REPORT}")"
        COMPUTER_MEMORY="$(_parse_report "Memory" "${HARDWARE_REPORT}")"
        COMPUTER_SERIAL="$(_parse_report "Serial Number (system)" "${HARDWARE_REPORT}")"
        CORE_COUNT="$(_parse_report "Total Number of Cores" "${HARDWARE_REPORT}")"
        OPEN_COMMAND="open"
        ZCAT_COMMAND="gzcat"
        DECKLINK_DRIVER_PLIST="/Library/Extensions/DeckLink_Driver.kext/Contents/Info.plist"
        VIDEO_CARD_DRIVER_VERSION="$(defaults read "${DECKLINK_DRIVER_PLIST}" CFBundleVersion)"
        DIR_SELECTION_DIALOG="Select an existing folder (or drag/drop one below). File System/Volumes for external media."
    elif [[ "${QUERY_OS_TYPE}" = "Linux" ]] ; then
        OS_TYPE="linux"
        if [[ $(dirname "$(command -v "${0}")") = "/usr/local/bin" ]] ; then
            if [[ -d "/home/linuxbrew/.linuxbrew/opt/vrecord" ]] ; then
                RESOURCE_PATH="/home/linuxbrew/.linuxbrew/opt/vrecord"
            else
                RESOURCE_PATH="$(brew --prefix vrecord)"
            fi
        else
            RESOURCE_PATH="${SCRIPTDIR}/Resources"
        fi
        DEFAULTFONT="/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf"
        if [[ ! -f "${DEFAULTFONT}" ]] ; then
          _report -wt "vrecord can't find a preferred font to use, please report this error to https://github.com/amiaopensource/vrecord/issues"
        fi
        HARDWARE_REPORT=$(lscpu)
        COMPUTER_MODEL_NAME="$(_parse_report "Model Name" "${HARDWARE_REPORT}")"
        CORE_COUNT="$(nproc --all)"
        OPEN_COMMAND="xdg-open"
        ZCAT_COMMAND="zcat"
        DIR_SELECTION_DIALOG="Select an existing folder (or drag/drop one below)."
    else
        echo "Unsupported OS, ${QUERY_OS_TYPE}, detected. Exiting."
        exit 1
    fi
}
if [[ -z "${OS_TYPE}" ]] ; then
    _setup_env_variables
    _include_var OS_TYPE RESOURCE_PATH DEFAULTFONT CORE_COUNT OPEN_COMMAND ZCAT_COMMAND COMPUTER_MODEL_NAME DIR_SELECTION_DIALOG
fi
if [[ "${OS_TYPE}" = "macOS" ]] ; then
    _include_var COMPUTER_MODEL_ID COMPUTER_PROCESSOR_NAME COMPUTER_PROCESSOR_SPEED COMPUTER_PROCESSOR_COUNT COMPUTER_MEMORY COMPUTER_SERIAL
fi

_gather_ffmpeg_vars(){
    CAPTURELOGSUFFIX="_vrecord_input.log"
    TIMECODELOGSUFFIX="_frame_timecodes.txt"
    if [[ -d "/usr/local/opt/ffmpegdecklink" ]] ; then
        BREW_PREFIX="/usr/local/opt/ffmpegdecklink"
    elif [[ -d "/home/linuxbrew/.linuxbrew/opt/ffmpegdecklink" ]] ; then
        BREW_PREFIX="/home/linuxbrew/.linuxbrew/opt/ffmpegdecklink"
    else
        BREW_PREFIX="$(brew --prefix ffmpegdecklink 2>/dev/null)"
    fi
    if [[ -d "${BREW_PREFIX}/bin" ]] ; then
        FFMPEG_BIN="${BREW_PREFIX}/bin/ffmpeg-dl"
        FFPLAY_BIN="${BREW_PREFIX}/bin/ffplay-dl"
        FFPROBE_BIN="${BREW_PREFIX}/bin/ffprobe-dl"
    else
        FFMPEG_BIN="$(which ffmpeg)"
        FFPLAY_BIN="$(which ffplay)"
        FFPROBE_BIN="$(which ffprobe)"
    fi
}

if [[ -z "${FFMPEG_BIN}" ]] ; then
    _gather_ffmpeg_vars
    _include_var CAPTURELOGSUFFIX TIMECODELOGSUFFIX BREW_PREFIX FFMPEG_BIN FFPLAY_BIN FFPROBE_BIN
fi

SHARED_FUNCTIONS_FILE="${RESOURCE_PATH}/vrecord_functions"
. "${SHARED_FUNCTIONS_FILE}"

# optional dependency checks
BMDTOOLS_INSTALLED="$(if command -v bmdcapture >/dev/null ; then echo true ; else echo false ; fi)"
DECKCONTROL_INSTALLED="$(if command -v deckcontrol >/dev/null ; then echo true ; else echo false ; fi)"
GNUPLOT_INSTALLED="$(if command -v gnuplot >/dev/null ; then echo true ; else echo false ; fi)"
MEDIACONCH_INSTALLED="$(if command -v mediaconch >/dev/null ; then echo true ; else echo false ; fi)"
MKVPROPEDIT_INSTALLED="$(if command -v mkvpropedit >/dev/null ; then echo true ; else echo false ; fi)"
MPV_INSTALLED="$(if command -v mpv >/dev/null ; then echo true ; else echo false ; fi)"
QCLI_INSTALLED="$(if command -v qcli >/dev/null ; then echo true ; else echo false ; fi)"

if [[ -f "${CONFIG_FILE}" ]] ; then
    . "${CONFIG_FILE}"
    # set defaults if not set by config file
    if [[ -z "${FFV1_SLICE_CHOICE}" ]] ; then
        FFV1_SLICE_CHOICE="16"
    fi
    if [[ -z "${DECKLINK_UTILITY_CHOICE}" ]] ; then
        DECKLINK_UTILITY_CHOICE="ffmpeg"
    fi
else
    _report -d "Initiatizing the configuration file at ${CONFIG_FILE}."
    RUNTYPE="edit"
fi

_gtk_vbox_list() {
    VARIABLE_NAME="${1}"
    WIDTH="${2}"
    LABEL="${3}"
    shift 3
    OPTION_LIST=("${@}")
    SELECTION="$(_get_index_of_value "${!VARIABLE_NAME}" "${OPTION_LIST[@]}")"
    if [[ "${VARIABLE_NAME}" == "DECKLINK_INPUT_CHOICE" ]] ; then
        LIST="<input>_get_decklink_inputs</input>"
    elif [[ "${VARIABLE_NAME}" == "AVFCTL_INPUT_CHOICE" ]] ; then
        LIST="<input>_get_avfctl_input_list</input>"
    else
        LIST="$(_expand_list2items "${OPTION_LIST[@]}")"
    fi

    _get_list_extras(){
        if [[ "${VARIABLE_NAME}" == "VIDEO_CODEC_CHOICE" ]] ; then
            echo '<action condition="command_is_true( [ \"$VIDEO_CODEC_CHOICE\" = \"FFV1 version 3\" ] && echo true)">enable:FFV1_SLICE_CHOICE</action>
                  <action condition="command_is_true( [ \"$VIDEO_CODEC_CHOICE\" != \"FFV1 version 3\" ] && echo true)">disable:FFV1_SLICE_CHOICE</action>
                  <action type="refresh">VRECORD_OUTPUT_NAME</action>'
        elif [[ "${VARIABLE_NAME}" == "CONTAINER_CHOICE" ]] ; then
            echo '<action condition="command_is_true( [ \"$CONTAINER_CHOICE\" = \"Matroska\" ] && echo true)">enable:EMBED_LOGS_CHOICE</action>
                  <action condition="command_is_true( [ \"$CONTAINER_CHOICE\" != \"Matroska\" ] && echo true)">disable:EMBED_LOGS_CHOICE</action>
                  <action type="refresh">VRECORD_OUTPUT_NAME</action>'
        elif  [[ "${VARIABLE_NAME}" == "AUDIO_MODE_CODEC_CHOICE" ]] ; then
            echo '<action type="refresh">VRECORD_OUTPUT_NAME</action>'
        elif  [[ "${VARIABLE_NAME}" == "DECKLINK_UTILITY_CHOICE" ]] ; then
          echo '<action condition="command_is_true( [ \"$DECKLINK_UTILITY_CHOICE\" = \"bmdcapture\" ] && echo true)">disable:TIMECODE_CHOICE</action>
                <action condition="command_is_true( [ \"$DECKLINK_UTILITY_CHOICE\" != \"bmdcapture\" ] && echo true)">enable:TIMECODE_CHOICE</action>
                <action type="refresh">VRECORD_OUTPUT_NAME</action>'
        fi
    }

    _get_vbox_extras(){
        if [[ "${VARIABLE_NAME}" == "TIMECODE_CHOICE" ]] ; then
            echo "
            <button>
                <label>Scan timecode types</label>
                <action>_update_config_file</action>
                <action type=\"exit\">timecode_scan</action>
            </button>"
        elif [[ "${VARIABLE_NAME}" == "EMBED_LOGS_CHOICE" ]] ; then
            echo "<sensitive>$(if $MKVPROPEDIT_INSTALLED ; then echo true ; else echo false ; fi)</sensitive>"
        elif [[ "${VARIABLE_NAME}" == "QCTOOLSXML_CHOICE" ]] ; then
            echo "<sensitive>$(if $QCLI_INSTALLED ; then echo true ; else echo false ; fi)</sensitive>"
        elif [[ "${VARIABLE_NAME}" == "DECKLINK_INPUT_CHOICE" ]] ; then
            echo "
            <button>
                <label>Rescan</label>
                <action type=\"clear\">DECKLINK_INPUT_CHOICE</action>
                <action type=\"refresh\">DECKLINK_INPUT_CHOICE</action>
            </button>"
        elif [[ "${VARIABLE_NAME}" == "AVFCTL_INPUT_CHOICE" ]] ; then
            echo "
            <button>
                <label>Rescan</label>
                <action type=\"clear\">AVFCTL_INPUT_CHOICE</action>
                <action type=\"refresh\">AVFCTL_INPUT_CHOICE</action>
            </button>"
        fi
    }

    echo "<vbox>
      <text>
          <label>${LABEL}</label>
      </text>
      <list selection-mode=\"1\" selected-row=\"${SELECTION}\">
          <width>${WIDTH}</width>
          <variable>${VARIABLE_NAME}</variable>
          ${LIST}
          $(_get_list_extras)
      </list>
      $(_get_vbox_extras)
    </vbox>"
}

_gtk_comboboxtext(){
    VARIABLE_NAME="${1}"
    LABEL="${3}"
    shift 3
    OPTION_LIST=("${@}")
    SELECTION="$(_get_index_of_value "${!VARIABLE_NAME}" "${OPTION_LIST[@]}")"
    if [[ "${VARIABLE_NAME}" == "DECKLINK_INPUT_CHOICE" ]] ; then
        LIST="<input>_get_decklink_inputs</input>"
    else
        LIST="$(_expand_list2items "${OPTION_LIST[@]}")"
    fi
    echo "<hbox>
      <text>
          <label>${LABEL}</label>
      </text>
      <comboboxtext allow-empty=\"false\" value-in-list=\"true\" button-sensitivity=\"1\" focus-on-click=\"false\" selection-mode=\"1\" selected-row=\"${SELECTION}\">
          <variable>${VARIABLE_NAME}</variable>
          ${LIST}
      </comboboxtext>
    </hbox>"
}

_get_decklink_inputs(){
    # get information on what input device options are available
    unset DECKLINK_DEVICES
    while read decklink_device ; do
        DECKLINK_DEVICES+=("${decklink_device}")
    done < <("${FFMPEG_BIN}" -nostdin -v 0 -sources decklink | awk -F'[][]' '{print $2}' | grep -v "^$")
    if [[ "${#DECKLINK_DEVICES[@]}" = 1 ]] ; then # default to first input if only one
        DECKLINK_INPUT_CHOICE="${DECKLINK_DEVICES[0]}"
    fi
}
_get_avfoundation_inputs(){
    # set avfoundation input options
    unset AVFOUNDATION_DEVICES
    while read avf_device ; do
        AVFOUNDATION_DEVICES+=("${avf_device}")
    done < <("${FFMPEG_BIN}" -nostdin -hide_banner -f avfoundation -list_devices 1 -i dummy 2>&1 | grep -A 10 "AVFoundation audio devices" | grep -o "\[[0-9]\].*" | cut -d " " -f2-)
}

_get_avfctl_inputs(){
    # set avfctl input options
    unset AVFCTL_DEVICES
    while read avfctl_device ; do
        AVFCTL_DEVICES+=("${avfctl_device}")
    done < <(avfctl -list_devices 2>&1 | grep -A 10 "Devices:" | grep -o "\[[0-9]\].*")
    if [[ "${#AVFCTL_DEVICES[@]}" = 1 ]] ; then # default to first input if only one
        AVFCTL_INPUT_CHOICE="${AVFCTL_DEVICES[0]}"
    fi
    if [[ "${OS_TYPE}" = "linux" ]] ; then
        AVFCTL_DEVICES+=('Default DV Device')
    fi
}

_get_decklink_inputs
_get_avfoundation_inputs
_get_avfctl_inputs

if [[ "${OS_TYPE}" = "linux" ]] ; then
    while read audio_device ; do
        AUDIO_DEVICES+=("${audio_device}")
    done < <(arecord -l | grep card | cut -d ':' -f2 | cut -d ',' -f1 | awk '{$1=$1;print}')
elif [[ "${OS_TYPE}" = "macOS" ]] ; then
    AUDIO_DEVICES=("${AVFOUNDATION_DEVICES[@]}")
fi

_get_audio_dev_num(){
    AUDIO_DEV_NUM=0
    while [[ "${AUDIO_DEV_CHOICE}" != "${AUDIO_DEVICES[${AUDIO_DEV_NUM}]}" ]] ; do
        AUDIO_DEV_NUM=$(( ${AUDIO_DEV_NUM} + 1 ))
    done
}

_set_up_edit_form() {
  _expand_list2items(){
    LIST=( "$@" )
    for i in "${LIST[@]}" ; do
      if [[ "$i" == "Quality Control View (mpv)" ]] && ! $MPV_INSTALLED ; then
          :
      elif [[ "$i" == "bmdcapture" ]] && ! $BMDTOOLS_INSTALLED ; then
          :
      else
          echo "<item>${i}</item>"
      fi
    done
  }
  _get_index_of_value(){
    # run with function, value to look for as first argument, and array to look in as 2nd argument, such function as
    # _get_index_of_value "${VIDEO_INPUT_CHOICE}" "${VIDEO_INPUT_OPTIONS[@]}"
    VALUE="${1}"
    shift
    LIST=( "$@" )
    INDEX=0
    MATCH=""
    for ITEM in "${LIST[@]}" ; do
        if [[ "${VALUE}" = "${ITEM}" ]] ; then
            MATCH="$INDEX"
        fi
        (( ++INDEX ))
    done
    if [[ -n "${MATCH}" ]] ; then
        echo -n "${MATCH}"
    fi
  }

# initialize deckcontrol temp files
FFMPEG_STATUS_TMP="$(_maketemp .ffmpeg.status.txt)"
DECKCONTROL_STATUS_TMP="$(_maketemp .deckcontrol.status.txt)"
DECKCONTROL_TIMECODE_TMP="$(_maketemp .deckcontrol.timecode.txt)"
AVFCTL_STATUS_TMP="$(_maketemp .avfctl.status.txt)"
echo "" > "${FFMPEG_STATUS_TMP}"
echo "disabled" > "$DECKCONTROL_STATUS_TMP"
echo "--:--:--:--" > "$DECKCONTROL_TIMECODE_TMP"
echo "disabled" > "$AVFCTL_STATUS_TMP"

SIDECAR_FILES_GUI="
<frame Sidecar file options>
    <hbox space-expand=\"true\">
        $(_gtk_vbox_list "FRAMEMD5_CHOICE"   "100"  "frameMD5s? (recommended)"  "${FRAMEMD5_OPTIONS[@]}")
        $(_gtk_vbox_list "QCTOOLSXML_CHOICE" "200"  "QCTools XML?"              "${QCTOOLSXML_OPTIONS[@]}")
    </hbox>
</frame>"

PLAYBACK_OPT_GUI="
<frame Playback options>
    <hbox space-expand=\"true\">
        $(_gtk_vbox_list "PLAYBACKVIEW_CHOICE"      "200" "Select View (for recording)"   "${PLAYBACKVIEW_OPTIONS[@]}")
        $(_gtk_vbox_list "PLAYBACKVIEW_CHOICE_PASS" "200" "Select View (for passthrough)" "${PLAYBACKVIEW_PASS_OPTIONS[@]}")
    </hbox>
</frame>"

OPTIONAL_TOOLS_GUI=$(cat << CONFIG_FORM
<frame Optional Tools>
  <hbox>
        <text>
            <label>bmdtools: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If bmdtools is installed, vrecord can offer bmdcapture as an alternate method (to ffmpeg) to receive an input from a Blackmagic capture device.">
            <input file stock="$(if $BMDTOOLS_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox>
        <text>
            <label>deckcontrol: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If deckcontrol is installed, vrecord can offer an interface to control videodecks via RS422 via a Blackmagic capture device.">
            <input file stock="$(if $DECKCONTROL_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox>
        <text>
            <label>gnuplot: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If gnuplot is installed, vrecord can may a graph output from qctools reports.">
            <input file stock="$(if $GNUPLOT_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox>
        <text>
            <label>mediaconch: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If mediaconch is installed, vrecord can perform checks after capture to ensure the file is as expected.">
            <input file stock="$(if $MEDIACONCH_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox>
        <text>
            <label>mkvpropedit: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If mkvpropedit is installed, vrecord can embed capture logs into any Matroska recordings.">
            <input file stock="$(if $MKVPROPEDIT_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox>
        <text>
            <label>mpv: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If mpv is installed, vrecord can offer additional playback view options.">
            <input file stock="$(if $MPV_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox>
        <text>
            <label>qcli: </label>
        </text>
        <pixmap stock-icon-size="1" tooltip-text="If qcli is installed, vrecord can offer options to create QCTools reports during or after capture.">
            <input file stock="$(if $QCLI_INSTALLED ; then echo gtk-yes ; else echo gtk-no ; fi)"></input>
        </pixmap>
    </hbox>
    <hbox space-fill="true" space-expand="true">
        <vbox>
            <text>
                <label>FFmpeg Status</label>
            </text>
            <vbox scrollable="true" height="240">
                <text wrap="true" xalign="0" selectable="true">
                    <variable export="false">ffmpeg_status</variable>
                    <input file>"${FFMPEG_STATUS_TMP}"</input>
                </text>
            </vbox>
            <button>
                <label>Check FFmpeg status</label>
                <action>_check_ffmpeg_install > ${FFMPEG_STATUS_TMP}</action>
                <action type="refresh">ffmpeg_status</action>
            </button>
        </vbox>
        <vbox>
            <text>
                <label>Environment</label>
            </text>
            <vbox scrollable="true" height="240">
                <text xalign="0" selectable="true">
                    <variable export="false">vrecord_env</variable>
                    <input file>"${VRECORD_VARS_FILE}"</input>
                </text>
            </vbox>
        </vbox>
    </hbox>
</frame>
CONFIG_FORM
)

DECKLINK_INPUT_GUI=$(cat << DECKLINK_FORM
<frame Decklink input options>
    <vbox>
        <hbox space-expand="true">
            $(_gtk_vbox_list "DECKLINK_UTILITY_CHOICE"  "100" "Select Input Utility"          "${DECKLINK_UTILITIES[@]}")
            $(_gtk_vbox_list "DECKLINK_INPUT_CHOICE"    "160" "Select Video Card"             "${DECKLINK_DEVICES[@]}")
            <vbox>
                $(_gtk_comboboxtext "VIDEO_INPUT_CHOICE"       "100" "Select Video Input"            "${VIDEO_INPUT_OPTIONS[@]}")
                $(_gtk_comboboxtext "AUDIO_INPUT_CHOICE"       "200" "Select Audio Input"            "${AUDIO_INPUT_OPTIONS[@]}")
                $(_gtk_comboboxtext "AUDIO_MAPPING_CHOICE"     "300" "Select Audio Channel Mapping"  "${CHANNEL_MAPPING_OPTIONS[@]}" )
                $(_gtk_comboboxtext "STANDARD_CHOICE"          "100" "Select Standard"               "${STANDARD_OPTIONS[@]}")
                $(_gtk_comboboxtext "VIDEO_BIT_DEPTH_CHOICE"   "100" "Select Video Bit Depth"        "${VIDEO_BITDEPTH_OPTIONS[@]}")
            </vbox>
            $(_gtk_vbox_list "TIMECODE_CHOICE"          "100" "Select timecode format"        "${TIMECODE_OPTIONS[@]}")
        </hbox>
        <checkbox>
            <label>Invert Second Channel of Audio (WARNING: Do not use this option unless required)</label>
            <default>false</default>
            <variable>INVERT_PHASE</variable>
        </checkbox>
        <frame Output file options>
            <hbox space-expand="true">
                $(_gtk_vbox_list "EMBED_LOGS_CHOICE"        "100" "Embed digitization logs in video file (Matroska ONLY)" "${EMBED_LOGS_OPTIONS[@]}")
                $(_gtk_vbox_list "CONTAINER_CHOICE"         "100" "Select File Format"            "${CONTAINER_OPTIONS[@]}")
                $(_gtk_vbox_list "FFV1_SLICE_CHOICE"        "100" "FFV1 Slice Count"              "${FFV1_SLICE_OPTIONS[@]}")
                $(_gtk_vbox_list "VIDEO_CODEC_CHOICE"       "160" "Select Video Codec"            "${VIDEO_CODEC_OPTIONS[@]}")
                $(_gtk_vbox_list "AUDIO_CODEC_CHOICE"       "100" "Select Audio Codec"            "${AUDIO_CODEC_OPTIONS[@]}")
            </hbox>
        </frame>
        <hbox>
            ${PLAYBACK_OPT_GUI}
            ${SIDECAR_FILES_GUI}
            <frame RS422 deck control>
                <hbox>
                    <vbox>
                        <text>
                            <label>Status</label>
                        </text>
                        <entry editable="false" has-frame="false">
                            <variable export="false">decklink_status</variable>
                            <input file>"${DECKCONTROL_STATUS_TMP}"</input>
                        </entry>
                    </vbox>
                    <vbox>
                        <text>
                            <label>Timecode</label>
                        </text>
                        <entry editable="false" has-frame="false">
                            <variable export="false">decklink_timecode</variable>
                            <input file>"${DECKCONTROL_TIMECODE_TMP}"</input>
                        </entry>
                    </vbox>
                    <timer milliseconds="true" interval="500" visible="false" disabled="true">
                         <variable export="false">deckcontrol_timer</variable>
                         <visible>disabled</visible>
                         <action>{ deckcontrol getcurrentstate | grep "state:\|detect" | sed "s/VTR control state: //g" > "${DECKCONTROL_STATUS_TMP}" ; deckcontrol gettimecode | grep "TC=" | cut -c 4- > "${DECKCONTROL_TIMECODE_TMP}" ; } &</action>
                         <action>refresh:decklink_status</action>
                         <action>refresh:decklink_timecode</action>
                    </timer>
                </hbox>
                <hbox>
                    <togglebutton>
                        <label>Deck Control</label>
                        <default>false</default>
                        <variable export="false">deckcontrol_toggle</variable>
                        <input file stock="gtk-execute"></input>
                        <action>if true enable:deckcontrol_timer</action>
                        <action>if true enable:decklink_status</action>
                        <action>if true enable:decklink_timecode</action>
                        <action>if true enable:deckcontrol_rewind</action>
                        <action>if true enable:deckcontrol_prev</action>
                        <action>if true enable:deckcontrol_play</action>
                        <action>if true enable:deckcontrol_stop</action>
                        <action>if true enable:deckcontrol_next</action>
                        <action>if true enable:deckcontrol_ff</action>
                        <action>if true enable:deckcontrol_eject</action>
                        <action>if false disable:deckcontrol_timer</action>
                        <action>if false disable:decklink_status</action>
                        <action>if false disable:decklink_timecode</action>
                        <action>if false disable:deckcontrol_rewind</action>
                        <action>if false disable:deckcontrol_prev</action>
                        <action>if false disable:deckcontrol_play</action>
                        <action>if false disable:deckcontrol_stop</action>
                        <action>if false disable:deckcontrol_next</action>
                        <action>if false disable:deckcontrol_ff</action>
                        <action>if false disable:deckcontrol_eject</action>
                    </togglebutton>
                    <hbox>
                        <button>
                            <variable export="false">deckcontrol_rewind</variable>
                            <input file stock="gtk-media-rewind"></input>
                            <visible>disabled</visible>
                            <action>deckcontrol rewind & >/dev/null</action>
                        </button>
                        <button>
                            <variable export="false">deckcontrol_prev</variable>
                            <input file stock="gtk-media-previous"></input>
                            <visible>disabled</visible>
                            <action>deckcontrol stepback & >/dev/null</action>
                        </button>
                        <button>
                            <variable export="false">deckcontrol_play</variable>
                            <input file stock="gtk-media-play"></input>
                            <visible>disabled</visible>
                            <action>deckcontrol play & >/dev/null</action>
                        </button>
                        <button>
                            <variable export="false">deckcontrol_stop</variable>
                            <input file stock="gtk-media-stop"></input>
                            <visible>disabled</visible>
                            <action>deckcontrol stop & >/dev/null</action>
                        </button>
                        <button>
                            <variable export="false">deckcontrol_next</variable>
                            <input file stock="gtk-media-next"></input>
                            <visible>disabled</visible>
                            <action>deckcontrol stepforward & >/dev/null</action>
                        </button>
                        <button>
                            <variable export="false">deckcontrol_ff</variable>
                            <input file stock="gtk-media-forward"></input>
                            <visible>disabled</visible>
                            <action>deckcontrol fastforward & >/dev/null</action>
                        </button>
                        <button>
                            <variable export="false">deckcontrol_eject</variable>
                            <label>Eject</label>
                            <visible>disabled</visible>
                            <action>deckcontrol eject & >/dev/null</action>
                        </button>
                    </hbox>
                </hbox>
            </frame>
        </hbox>
    </vbox>
</frame>
DECKLINK_FORM
)

# Set DV Control variables
if [[ "${OS_TYPE}" = "linux" ]] ; then
        DV_REPACK_CMD=""
        DV_RW_CMD='dvcont rewind '
        DV_PLAY_CMD='dvcont play '
        DV_STOP_CMD='dvcont stop '
        DV_FF_CMD='dvcont ff '
        STATUS_CMD='dvcont status '
    elif [[ "${OS_TYPE}" = "macOS" ]] ; then
        DV_REPACK_CMD='{ avfctl -cmd ff -foreground; avfctl -cmd rew; }'
        DV_RW_CMD='avfctl -cmd rew '
        DV_PLAY_CMD='avfctl -cmd play '
        DV_STOP_CMD='avfctl -cmd stop '
        DV_FF_CMD='avfctl -cmd ff '
        STATUS_CMD="avfctl -status 2>&1 | grep -o 'Device \[.*' | sed 's|Device ||g;s| status||g'"
fi

AVFCTL_INPUT_GUI=$(cat << AVFCTL_FORM
<frame DVRescue avfctl input options>
    <vbox>
        <hbox space-expand="true">
            $(_gtk_vbox_list "AVFCTL_INPUT_CHOICE"         "-1" "Select a DV Device"           "${AVFCTL_DEVICES[@]}")
        </hbox>
    </vbox>
    <frame DV deck control>
        <hbox>
            <vbox>
                <text>
                    <label>Status</label>
                </text>
                <entry editable="false" has-frame="false">
                    <variable export="false">avfctl_status</variable>
                    <input file>"${AVFCTL_STATUS_TMP}"</input>
                </entry>
            </vbox>
            <timer milliseconds="true" interval="300" visible="false" disabled="true">
                 <variable export="false">avfctl_timer</variable>
                 <visible>disabled</visible>
                 <action>${STATUS_CMD} > "${AVFCTL_STATUS_TMP}" &</action>
                 <action>refresh:avfctl_status</action>
            </timer>
        </hbox>
        <hbox>
            <togglebutton>
                <label>Deck Control</label>
                <default>false</default>
                <variable export="false">avfctl_toggle</variable>
                <input file stock="gtk-execute"></input>
                <action>if true enable:avfctl_timer</action>
                <action>if true enable:avfctl_status</action>
                <action>if true enable:avfctl_repack</action>
                <action>if true enable:avfctl_rewind</action>
                <action>if true enable:avfctl_play</action>
                <action>if true enable:avfctl_stop</action>
                <action>if true enable:avfctl_ff</action>
                <action>if false disable:avfctl_timer</action>
                <action>if false disable:avfctl_status</action>
                <action>if false disable:avfctl_repack</action>
                <action>if false disable:avfctl_rewind</action>
                <action>if false disable:avfctl_play</action>
                <action>if false disable:avfctl_stop</action>
                <action>if false disable:avfctl_ff</action>
            </togglebutton>
            <hbox>
                <button>
                    <variable export="false">avfctl_repack</variable>
                    <label>Repack</label>
                    <visible>disabled</visible>
                    <action>${DV_REPACK_CMD}&</action>
                </button>
                <button>
                    <variable export="false">avfctl_rewind</variable>
                    <input file stock="gtk-media-rewind"></input>
                    <visible>disabled</visible>
                    <action>${DV_RW_CMD}&</action>
                </button>
                <button>
                    <variable export="false">avfctl_play</variable>
                    <input file stock="gtk-media-play"></input>
                    <visible>disabled</visible>
                    <action>${DV_PLAY_CMD}&</action>
                </button>
                <button>
                    <variable export="false">avfctl_stop</variable>
                    <input file stock="gtk-media-stop"></input>
                    <visible>disabled</visible>
                    <action>${DV_STOP_CMD}&</action>
                </button>
                <button>
                    <variable export="false">avfctl_ff</variable>
                    <input file stock="gtk-media-forward"></input>
                    <visible>disabled</visible>
                    <action>${DV_FF_CMD}&</action>
                </button>
            </hbox>
        </hbox>
        <vbox space-expand="true">
            <pixmap><input file>"${RESOURCE_PATH}/dvrecord.png"</input></pixmap>
        </vbox>
    </frame>
</frame>
AVFCTL_FORM
)

AUDIO_INPUT_GUI='
<frame Audio input options>
  <vbox space-expand="true">
    <hbox space-expand="true">
      '$(_gtk_vbox_list "AUDIO_DEV_CHOICE"         "-1" "Select an Audio Device"           "${AUDIO_DEVICES[@]}")'
      '$(_gtk_vbox_list "AUDIO_MODE_CODEC_CHOICE"  "-1" "Select Audio Codec"            "${AUDIO_CODEC_OPTIONS[@]:0:2}")'
      '$(_gtk_vbox_list "AUDIO_CHANNEL_CHOICE"     "-1" "Select Audio Channels"            "${AUDIO_CHANNEL_CHOICE_OPTIONS[@]}")'
      '$(_gtk_vbox_list "AUDIO_MODE_SR_CHOICE"     "-1" "Select Sampling Rate"            "${AUDIO_MODE_SR_CHOICE_OPTIONS[@]}")'
    </hbox>
  </vbox>
  <vbox space-expand="true">
    <pixmap><input file>'"${RESOURCE_PATH}/audio_mode.gif"'</input></pixmap>
  </vbox>
</frame>'

if [[ "${VERBOSE_GTKDIALOG}" = "Y" ]] ; then
    DEBUGGER='<hbox>
    <text>
        <label>Debug:</label>
    </text>
    <vbox scrollable="true">
        <text wrap="true" xalign="0" selectable="true">
            <variable export="false">debug_report</variable>
            <input>_debug_report</input>
        </text>
    </vbox>
    <button>
        <label>Refresh</label>
        <action type="refresh">debug_report</action>
    </button>
</hbox>'
else
    DEBUGGER=""
fi

export MAIN_DIALOG='
<window title="vrecord configuration">
    <vbox>
        <text>
            <label>Set file recording options.</label>
        </text>
        <frame Input Options>
        <notebook page="'"${DEVICE_INPUT_CHOICE}"'" tab-labels="Decklink|DV|Audio|Config">
            '"${DECKLINK_INPUT_GUI}"'
            '"${AVFCTL_INPUT_GUI}"'
            '"${AUDIO_INPUT_GUI}"'
            '"${OPTIONAL_TOOLS_GUI}"'
            <variable>DEVICE_INPUT_CHOICE</variable>
            <action signal="button-release-event" type="refresh">VRECORD_OUTPUT_NAME</action>
        </notebook>
        </frame>
        <hbox>
            <frame Select a recording directory>
                <hbox>
                    <entry accept="directory" fs-title="'"${DIR_SELECTION_DIALOG}"'">
                        <variable>DIR</variable>
                        <default>'"${DIR:-\"\"}"'</default>
                        <action signal="key-release-event" type="refresh">VRECORD_OUTPUT_NAME</action>
                    </entry>
                    <button>
                        <input file stock="gtk-open"></input>
                        <variable>DIRBROWSE</variable>
                        <action type="fileselect">DIR</action>
                    </button>
                </hbox>
            </frame>
            <frame Select a directory for auxiliary files (leave blank to match the recording directory).>
                <hbox>
                    <entry accept="directory" tooltip-text="select the directory for automatically generated logs and checksums"  \fs-title="'"${DIR_SELECTION_DIALOG}"'">
                        <variable>LOGDIR</variable>
                        <default>'"${LOGDIR:-\"\"}"'</default>
                    </entry>
                    <button>
                        <input file stock="gtk-open"></input>
                        <variable>LOGDIRBROWSE</variable>
                        <action type="fileselect">LOGDIR</action>
                    </button>
                </hbox>
            </frame>
        </hbox>
        <hbox>
            <frame Recording event options>
                <hbox space-expand="true">
                    <vbox>
                        <text>
                            <label>Name of Recording</label>
                        </text>
                        <entry>
                            <default>"'"${ID}"'"</default>
                            <variable>ID</variable>
                            <action signal="key-release-event" type="refresh">VRECORD_OUTPUT_NAME</action>
                        </entry>
                    </vbox>
                    <vbox>
                        <text>
                            <label>Enter the name of the person digitizing this tape.</label>
                        </text>
                        <entry>
                            <variable>TECHNICIAN</variable>
                        </entry>
                    </vbox>
                    <vbox>
                        <text>
                            <label>Set recording time (integer or decimal) in minutes</label>
                        </text>
                        <entry activates_default="true" tooltip-text="Suggested:23 33 63 93. Leave blank for indefinite recording time">
                            <default>"'"${DURATION}"'"</default>
                            <variable>DURATION</variable>
                        </entry>
                    </vbox>
                </hbox>
            </frame>
            <frame File naming options>
                <hbox space-expand="true">
                    <vbox>
                        <text>
                            <label>Enter an optional file prefix</label>
                        </text>
                        <entry>
                            <default>"'"${PREFIX}"'"</default>
                            <variable>PREFIX</variable>
                            <action signal="key-release-event" type="refresh">VRECORD_OUTPUT_NAME</action>
                        </entry>
                    </vbox>
                    <vbox>
                        <text>
                            <label>Enter an optional file suffix</label>
                        </text>
                        <entry>
                            <default>"'"${USER_SUFFIX}"'"</default>
                            <variable>USER_SUFFIX</variable>
                            <action signal="key-release-event" type="refresh">VRECORD_OUTPUT_NAME</action>
                        </entry>
                    </vbox>
                    <vbox>
                        <checkbox>
                            <label>Check this to turn off appending of suffixes</label>
                            <default>"'"${NO_SUFFIX}"'"</default>
                            <variable>NO_SUFFIX</variable>
                            <action signal="key-release-event" type="refresh">VRECORD_OUTPUT_NAME</action>
                        </checkbox>
                    </vbox>
                </hbox>
            </frame>
        </hbox>
        <vbox>
            <hbox>
                <text>
                    <label>Output Filename:</label>
                </text>
                <entry editable="false" has-frame="false">
                    <variable>VRECORD_OUTPUT_NAME</variable>
                    <input>_get_output_filename</input>
                </entry>
            </hbox>
            <hbox>
                <text>
                    <label>Errors & Warnings:</label>
                </text>
                <vbox scrollable="true" height="28">
                    <text wrap="false" xalign="0" selectable="true">
                        <variable export="false">VRECORD_FORM_VALIDATION</variable>
                        <input>_validate_form</input>
                    </text>
                </vbox>
            </hbox>
            '"${DEBUGGER}"'
        </vbox>
        <vbox>
            <hbox>
                <button>
                    <label>Record</label>
                    <input file stock="gtk-media-record"></input>
                    <variable>record_button</variable>
                    <action>_update_config_file</action>
                    <action type="exit">Record</action>
                </button>
                <button>
                    <label>Passthrough</label>
                    <input file stock="gtk-media-play"></input>
                    <variable>passthrough_button</variable>
                    <action>_passthrough_command</action>
                </button>
                <button>
                    <label>Save Settings</label>
                    <input file stock="gtk-save"></input>
                    <variable>save_button</variable>
                    <action>_update_config_file</action>
                </button>
                <button>
                    <label>Home</label>
                    <input file stock="gtk-index"></input>
                    <variable>home_button</variable>
                    <action>_update_config_file</action>
                    <action type="launch">HOME_DIALOG</action>
                </button>
                <button cancel>
                </button>
                <button>
                    <label>Refresh</label>
                    <input file stock="gtk-refresh"></input>
                    <action>_update_config_file</action>
                    <action type="exit">refresh</action>
                </button>
            </hbox>
        </vbox>
    </vbox>
    <variable>MAIN_DIALOG</variable>
    <action signal="show" type="refresh">VRECORD_FORM_VALIDATION</action>
    <action signal="enter-notify-event" type="refresh">VRECORD_FORM_VALIDATION</action>
    <action signal="leave-notify-event" type="refresh">VRECORD_FORM_VALIDATION</action>
    <action signal="show" type="closewindow">HOME_DIALOG</action>
    <action signal="show" type="refresh">VRECORD_OUTPUT_NAME</action>
</window>
'
}

HOME_DIALOG=$(cat << GTKFORM
<window title="Welcome to Vrecord!">
    <vbox>
        <vbox>
            <hbox>
                <button>
                    <label>Record</label>
                    <input file>${RESOURCE_PATH}/vrecord_logo.png</input>
                    <action type="exit">record</action>
                </button>
                <button>
                    <label>Passthrough</label>
                    <input file>${RESOURCE_PATH}/vrecord_logo_playback.png</input>
                    <action>_passthrough_command</action>
                </button>
                <button>
                    <label>Audio Check</label>
                    <input file>${RESOURCE_PATH}/vrecord_logo_audio.png</input>
                    <action type="exit">audiopassthrough</action>
                </button>
                </hbox>
                <hbox>
                <button>
                    <label>Edit Settings</label>
                    <input file>${RESOURCE_PATH}/vrecord_logo_edit.png</input>
                    <action type="launch">MAIN_DIALOG</action>
                </button>
                <button>
                    <label>Help</label>
                    <input file>${RESOURCE_PATH}/vrecord_logo_help.png</input>
                    <action>man vrecord</action>
                </button>
                <button>
                    <label>Documentation</label>
                    <input file>${RESOURCE_PATH}/vrecord_logo_documentation.png</input>
                    <action>${OPEN_COMMAND} https://github.com/amiaopensource/vrecord#vrecord-documentation</action>
                </button>
            </hbox>
        </vbox>
        <hbox>
            <button cancel></button>
        </hbox>
    </vbox>
    <variable>HOME_DIALOG</variable>
    <action signal="show" type="closewindow">MAIN_DIALOG</action>
</window>
GTKFORM
)
export HOME_DIALOG


_report_var(){
    while [[ "${@}" != "" ]] ; do
        VAR_NAME="${1}"
        VAR_VALUE="${!1}"
        shift
        if   [[ "$VAR_NAME" == "DECKLINK_INPUT_CHOICE" ]] && [[ "${DEVICE_INPUT_CHOICE}" != "0" ]] ; then
            :
        elif [[ "$VAR_NAME" == "AVFCTL_INPUT_CHOICE" ]] && [[ "${DEVICE_INPUT_CHOICE}" != "1" ]] ; then
            :
        elif [[ "$VAR_NAME" == "FFV1_SLICE_CHOICE" ]] && [[ "${VIDEO_CODEC_CHOICE}" != "FFV1 version 3" ]] ; then
            :
        elif [[ "$VAR_NAME" == "EMBED_LOGS_CHOICE" ]] && [[ "${CONTAINER_CHOICE}" != "Matroska" ]] ; then
            :
        else
            printf " %-24s = %s \n" "$VAR_NAME" "$VAR_VALUE"
        fi
    done
}

# edit mode
_edit_mode(){

    _get_decklink_inputs
    _get_avfoundation_inputs
    _set_up_edit_form

    # run the edit form in gtkdialog
    HOME_DIALOG_TMP="${HOME_DIALOG}"
    MAIN_DIALOG_TMP="${MAIN_DIALOG}"

    GTK_INC="$(_maketemp .vrecord.gtkdialog.inc)"
    cat "${VRECORD_VARS_FILE}" > "${GTK_INC}"
    echo "CONFIG_FILE=${CONFIG_FILE}" >> "${GTK_INC}"
    cat "${SHARED_FUNCTIONS_FILE}" >> "${GTK_INC}"

    if [[ "${VERBOSE_GTKDIALOG}" = "Y" ]] ; then
        if [[ "$RUNTYPE" = "GUI" ]] || [[ "${GUI}" = "1" ]] ; then
            eval "$(gtkdialog --include="${GTK_INC}" --program HOME_DIALOG --center)"
        else
            eval "$(gtkdialog --include="${GTK_INC}" --program MAIN_DIALOG --center)"
        fi
    else
        if [[ "$RUNTYPE" = "GUI" ]] || [[ "${GUI}" = "1" ]] ; then
            eval "$(gtkdialog --include="${GTK_INC}" --program HOME_DIALOG --center 2> /dev/null)"
        else
            eval "$(gtkdialog --include="${GTK_INC}" --program MAIN_DIALOG --center 2> /dev/null)"
        fi
    fi
    HOME_DIALOG="${HOME_DIALOG_TMP}"
    MAIN_DIALOG="${MAIN_DIALOG_TMP}"

    # process the results of the edit form
    if   [[ "${EXIT}" = "abort" ]] ; then
        _report -d "Exiting Vrecord. Goodbye!"
        exit 0
    elif [[ "${EXIT}" = "Cancel" ]] ; then
        _report -d "Editing of preferences was canceled by the user."
        _report -d "Exiting Vrecord. Goodbye!"
        exit 0
    elif [[ "${EXIT}" = "Record" ]] ; then
        RUNTYPE="record"
    elif [[ "${EXIT}" = "passthrough" ]] ; then
        RUNTYPE="passthrough"
    elif [[ "${EXIT}" = "refresh" ]] ; then
        RUNTYPE="edit"
    elif [[ "${EXIT}" = "timecode_scan" ]] ; then
        _report -dt "Scanning each supported type of timecode."
        for timecode_type in "${TIMECODE_OPTIONS[@]}" ; do
            tc_value="$("${FFPROBE_BIN}" "${GRAB_INPUT[@]}" -timecode_format "${timecode_type}" -show_entries stream_tags=timecode -of default=nw=1:nk=1 2>/dev/null)"
            if [[ -z "${tc_value}" ]] ; then
                tc_value="none"
            fi
            echo "${timecode_type}: ${tc_value}"
        done
        RUNTYPE="edit"
    else
        _report_unexpected_error EXIT
    fi
}

# passthrough and audiopassthrough modes
_passthrough_mode(){
    _setup_vrecord_process
    if [[ "${VRECORD_STEPS}" = "1" ]] ; then
        "${PLAYER_COMMAND[@]}" 2> >(tee "${VRECORD_INPUT_TMP}" 1>&2)
    elif [[ "${VRECORD_STEPS}" = "2" ]] ; then
        "${RECORD_COMMAND[@]}" 2> >(tee "${VRECORD_INPUT_TMP}" 1>&2) | "${PLAYER_COMMAND[@]}"
    else
        _report_unexpected_error VRECORD_STEPS
    fi
}

_audiopassthrough_mode(){
    PLAYBACKVIEW_CHOICE_PASS="Audio + Video"
    _lookup_choice "Audio + Video"
    _passthrough_mode
}

# create a capture log of decisions made in vrecord
_writeingestlog(){
    if [[ "${INGESTLOG}" ]] ; then
        KEY="${1}"
        shift
        VALUE="${@}"
        # need to add yaml style escaping
        echo "${KEY}: ${VALUE}" >> "${INGESTLOG}"
    else
        _report -wt "The _writeingestlog function was called, but the ingestlog file (${INGESTLOG}) is not declared."
    fi
}

# create a jpeg of qc data graphs for quick assessment
_qcgraphimage(){
    # get audio data
    qctools_CONFIGFILE_A="$(_maketemp .astats_A.csv)"
    "${ZCAT_COMMAND}" "$1" | perl -nle 'print if not m{lavfi.(?!astats.Overall.Min_level|astats.Overall.Max_level|astats.Overall.Peak_level|aphasemeter.phase)}' | xmlstarlet select -t -m "//ffprobe:ffprobe/frames/frame[@media_type='audio']" \
       -v "@pkt_pts_time" -o " " \
       -v "tag[@key='lavfi.astats.Overall.Max_level']/@value" -o " " \
       -v "tag[@key='lavfi.astats.Overall.Min_level']/@value" -o " " \
       -v "tag[@key='lavfi.astats.Overall.Peak_level']/@value" -o " " \
       -v "tag[@key='lavfi.aphasemeter.phase']/@value" -n > "${qctools_CONFIGFILE_A}"
    # get video data
    qctools_CONFIGFILE_V="$(_maketemp .signalstats.V.csv)"
    "${ZCAT_COMMAND}" "$1" | perl -nle 'print if not m{lavfi.(?!signalstats.BRNG|signalstats.TOUT|signalstats.SATMAX|signalstats.SATAVG|ssim.Y|ssim.U|ssim.V)}' | xmlstarlet select -t -m "//ffprobe:ffprobe/frames/frame[@media_type='video']" \
       -v "@pkt_pts_time" -o " " \
       -v "tag[@key='lavfi.signalstats.TOUT']/@value" -o " " \
       -v "tag[@key='lavfi.signalstats.BRNG']/@value" -o " " \
       -v "tag[@key='lavfi.signalstats.SATMAX']/@value" -o " " \
       -v "tag[@key='lavfi.signalstats.SATAVG']/@value" -o " " \
       -v "tag[@key='lavfi.ssim.Y']/@value" -o " " \
       -v "tag[@key='lavfi.ssim.U']/@value" -o " " \
       -v "tag[@key='lavfi.ssim.V']/@value" -n > "${qctools_CONFIGFILE_V}"

    # determine SATURATION scale
    VBitdepth="$("${ZCAT_COMMAND}" "$1" | perl -nle 'print if not m{<frame|</frame|<tag}' | xmlstarlet sel -t -v "//stream[@codec_type='video']/@pix_fmt" -n
    )"
    if [[ "${VBitdepth}" = "yuv422p10le" ]] ; then
        SATpalette="(0'#a0a0a0',80'#bebebe',177.4'#c8c800',322'#a0ff20',354.8'#00ff00',413.8'#006400',433.46'#00ff00',453.13'#a0ff20',472.8'#ffa500',496'#ff0000')"
        SATcbrange="[0:496]"
        SATyrange="[0:725]"
    else
        SATpalette="(0'#a0a0a0',20'#bebebe',44.35'#c8c800',80'#a0ff20',88.7'#00ff00',103.45'#006400',108.2'#00ff00',113.2'#a0ff20',118.2'#ffa500',124'#ff0000')"
        SATcbrange="[0:124]"
        SATyrange="[0:183]"
    fi

    echo "set terminal jpeg size 1920, 1080
    set output '${LOGDIR}/${FULL_OUTPUT_ID}_QC_output_graphs.jpeg'
    set term jpeg font 'times,12'
    set multiplot layout 7, 1 title '${ID} QC Data Graphs (ver.2)' margins screen .05,.93, .05, .93 spacing screen 0, char .7
    set style line 11 lc rgb '#808080' lt 1
    set border 15 back ls 11
    set format x '%tH:%tM:%.1tS' time
    set format x2 '%tH:%tM:%.1tS' time
    set x2tics border out nomirror
    set xtics border mirror in scale 1.5,.7 format ''
    set ytics border out nomirror font 'times,10'
    set grid y
    set grid x
    set grid mxtics
    set colorbox vertical back user origin graph 1.01,0 size char 1,6
    set cbtics font 'times,10'
    set key inside right top reverse samplen .00
    unset key
    set yrange [-2147483648.:2147483648.]
    set palette model RGB defined (-0.8'#ff0000',-0.6'#ffa500',-0.4'#a0ff20',-0.2'#00ff00',0'#006400',0.2'#00ff00',0.4'#a0ff20',.6'#ffa500',0.8'#ff0000') maxcolors 128
    set cbrange [-2147483648.:2147483648.]
    set style fill solid
    set label 1 'Min/Max Level' at graph .5,.9 center front
    plot '${qctools_CONFIGFILE_A}' using 1:2:2 with boxes palette title 'Max Level', '' using 1:3:3 with boxes palette title 'Min Level'
    unset cbrange
    unset x2tics
    set yrange [-70:0]
    set cbrange [0:-50.]
    set palette model RGB defined (-50'#006400',-35'#00ff00',-15'#a0ff20',-5'#ffa500',-0.5'#ff0000') maxcolors 128
    set style line 15 linecolor palette lw 4
    set label 1 'Peak Level (dB)' at graph .5,.9 front
    plot '' using 1:4:4 with lines ls 15 title 'Peak Level (dB)'
    unset yrange
    unset cbrange
    set palette model RGB defined (-0.8'#ff0000',-0.6'#ffa500',-0.4'#a0ff20',0'#00ff00',1'#006400') maxcolors 128
    set cbrange [-0.8:1]
    set yrange [-1:1]
    set style line 25 linecolor palette lw 4
    set label 1 'Audio Phase' at graph .5,.9 front
    plot '' using 1:5:5 with lines ls 25 title 'Audio Phase'
    unset yrange
    unset cbrange
    set palette model RGB defined (0'#006400',0.01'#00ff00',0.02'#fffb20',.04'#ffa500',0.05'#ff0000') maxcolors 128
    set cbrange [0:.05]
    set yrange [0:.1]
    set label 1 '% Outside of Broadcast Range' at graph .5,.9 front
    plot '${qctools_CONFIGFILE_V}' using 1:3:3 with boxes palette title '% Outside of Broadcast Range'
    unset yrange
    set style line 10 linecolor '#804080' lw 2
    set label 1 '% Temporal OUTliers' at graph .5,.9 front
    plot '' using 1:2 with lines ls 10 title '% Temporal OUTliers'
    unset yrange
    unset cbrange
    set style line 1 linecolor '#f03232' lw 2
    set style line 2 linecolor '#006400' lw 2
    set style line 3 linecolor '#00ff00' lw 2
    set style line 4 linecolor '#f03232' lw 2
    set style line 5 linecolor '#000000' lw 2
    set style line 6 linecolor '#00008b' lw 2
    set yrange ${SATyrange}
    set palette model RGB defined ${SATpalette} maxcolors 128
    set cbrange ${SATcbrange}
    unset label
    set key at graph 1.06,.5 center vertical Left noopaque noreverse font 'times,9'
    set label 1 'Saturation Level' at graph .5,.9 center front
    plot '' using 1:4:4 with boxes palette title 'SatMax', '' using 1:5 with lines ls 5 title 'SatAvg'
    unset yrange
    unset cbrange
    unset xtics
    unset key
    set key at graph 1.06,.5 right vertical Right noopaque noreverse
    set x2tics border mirror in scale 1.5,.7 format ''
    set xtics border out nomirror format '%tH:%tM:%.1tS' time
    set label 1 'Structural SImilarity Metric' at graph .5,.1 center front
    plot '' using 1:6 with lines ls 5 title 'SSIM-Y', '' using 1:7 with lines ls 2 title 'SSIM-U', '' using 1:8 with lines ls 6 title 'SSIM-V'
    " | gnuplot
}

# GUI mode + CLI reset, edit modes
if [[ "${RUNTYPE}" = "reset" ]] ; then
    _report -q -n "Resetting the configuration will clear ${CONFIG_FILE}. Please enter [Y] to confirm: "
    read RESET_RESPONSE
    if [[ "${RESET_RESPONSE}" = [Yy] ]] ; then
        _report -d "Clearing ${CONFIG_FILE}."
        echo -n "" > "${CONFIG_FILE}"
        RUNTYPE="edit"
    else
        _report -d "Reset aborted. Exiting."
        exit 0
    fi
fi
while [[ "${RUNTYPE}" = "edit" || "${RUNTYPE}" = "GUI" ]] ; do
    _edit_mode
done

# CLI passthrough and audiopassthrough modes
# GUI mode loops
if [[ "${GUI}" = 1 ]] ; then
    while [[ "${RUNTYPE}" != "record" ]] ; do
        if [[ "${RUNTYPE}" = "passthrough" ]] ; then
            _passthrough_mode
            RUNTYPE="GUI"
        elif [[ "${RUNTYPE}" = "audiopassthrough" ]] ; then
            _audiopassthrough_mode
            RUNTYPE="GUI"
        elif [[ "${RUNTYPE}" = "edit" || "$RUNTYPE" = "GUI" ]] ; then
            _edit_mode
        fi
    done
else
    if [[ "${RUNTYPE}" = "passthrough" ]] ; then
        _passthrough_mode
        exit 0
    elif [[ "${RUNTYPE}" = "audiopassthrough" ]] ; then
        _audiopassthrough_mode
        exit 0
    fi
fi

# record mode
while [[ -z "${ID}" ]] ; do
    _report -q -n "Enter ${AHEM}Identifier: "
    read ID
    if [[ "${ID}" = "q" ]] ; then
        _report -w "Interpreting 'q' to quit."
        exit 1
    fi
    AHEM="a (non-blank) "
done
if [[ ! -d "${DIR}" ]] ; then
    _report -q -n "Enter Directory: "
    read DIR
    DIR="$(echo "${DIR}" | sed "s/^['\"]\(.*\).$/\1/")"
    if [[ ! -d "${DIR}" ]] ; then
        _report -w "Error: Not a valid directory"
        exit 1
    fi
fi

if [[ ! -d "${LOGDIR}" ]] ; then
    if [[ ! -d "${DIR}" ]] ; then
        _report -q -n "Enter Directory for Auxiliary Files (If blank will default to recording directory): "
        read LOGDIR
        LOGDIR="$(echo "${LOGDIR}" | sed "s/^['\"]\(.*\).$/\1/")"
    else
        LOGDIR="${DIR}"
    fi
    if [[ ! -d "${LOGDIR}" ]] ; then
        _report -w "Error: Not a valid directory"
        exit 1
    fi
fi

if [[ "${DEVICE_INPUT_CHOICE}" = "0" ]] ; then
    _review_option "CONTAINER_CHOICE" "${CONTAINER_OPTIONS[@]}"
    _review_option "VIDEO_CODEC_CHOICE" "${VIDEO_CODEC_OPTIONS[@]}"
    if [[ "${VIDEO_CODEC_CHOICE}" = "FFV1 version 3" ]] ; then
        _review_option -n "FFV1_SLICE_CHOICE" "${FFV1_SLICE_OPTIONS[@]}"
    fi
    _review_option "AUDIO_CODEC_CHOICE" "${AUDIO_CODEC_OPTIONS[@]}"
fi

# Check for user suffix to override automatic settings
if [[ "${NO_SUFFIX}" = 'true' ]] ; then
    SUFFIX=""
elif [[ -n "${USER_SUFFIX}" ]] ; then
    SUFFIX="${USER_SUFFIX}"
fi

FULL_OUTPUT_ID="${PREFIX}${ID}${SUFFIX}"
FULL_CAPTURE_LOG="${LOGDIR}/${FULL_OUTPUT_ID}${CAPTURELOGSUFFIX}"

VRECORD_OUTPUT="${DIR}/${FULL_OUTPUT_ID}.${EXTENSION}"
if [[ -f "${VRECORD_OUTPUT}" ]] ; then
    _report -w "A file called ${VRECORD_OUTPUT} already exists."
    _report -w "Exiting to avoid overwriting that file."
    exit
fi

if [[ "${DEVICE_INPUT_CHOICE}" = "0" ]] ; then
    _review_option "QCTOOLSXML_CHOICE" "${QCTOOLSXML_OPTIONS[@]}"
    if [[ "${QCTOOLSXML_CHOICE}" != "No" && ! "$(command -v qcli)" ]] ; then
        _report -w "Please install qcli to use the qctools reporting option."
        _report -w "Such as \`brew install qcli\`."
        exit 1
    fi
    _review_option "FRAMEMD5_CHOICE" "${FRAMEMD5_OPTIONS[@]}"
    if [[ "${FRAMEMD5_CHOICE}" = "Yes" ]] ; then
        FRAMEMD5NAME="${LOGDIR}/${FULL_OUTPUT_ID}.framemd5"
        EXTRAOUTPUTS=(-an -f framemd5 "${FRAMEMD5NAME}")
    fi
    if [[ "${FORMAT}" = "matroska" ]] ; then
        _review_option "EMBED_LOGS_CHOICE" "${EMBED_LOGS_OPTIONS[@]}"
    fi
fi

if [[ -n "${DURATION}" ]] ; then
    DUR_SECONDS=$(bc <<< "${DURATION} * 60" | sed "s/^\./0./")
    TIME_LIMIT=(-t "${DUR_SECONDS}")
fi

if [[ "${DEVICE_INPUT_CHOICE}" = "0" ]] ; then
    _report -d "Summary: ${VIDEOCODECNAME}/${FORMAT} ${PIXEL_FORMAT} file from ${STANDARD} ${VIDEO_INPUT} ${AUDIO_INPUT}. Frame MD5s=${FRAMEMD5_CHOICE}, QCTools XML=${QCTOOLSXML_CHOICE}, and Technician=${TECHNICIAN}. Inputs recorded to ${VRECORD_OUTPUT} and Auxiliary Files created in ${LOGDIR}"
elif [[ "${DEVICE_INPUT_CHOICE}" = "1" ]] ; then
    _report -d "Summary: Copying video from ${AVFCTL_INPUT_CHOICE}. Technician=${TECHNICIAN}. Inputs recorded to ${VRECORD_OUTPUT} and Auxiliary Files created in ${LOGDIR}"
elif [[ "${DEVICE_INPUT_CHOICE}" = "2" ]] ; then
    _report -d "Summary: Recording audio from ${AUDIO_DEV_CHOICE}. Technician=${TECHNICIAN}. Inputs recorded to ${VRECORD_OUTPUT} and Auxiliary Files created in ${LOGDIR}"

fi

if [[ "${DEVICE_INPUT_CHOICE}" = "0" ]] ; then
    if [[ "${INVERT_PHASE}" = 'true' ]] ; then
        echo -e " \033[101mWARNING: Option to invert phase of second audio channel has been selected\033[0m"
    fi
fi
_report -q "Hit enter to start recording"
read

# create log of vrecord decisions
INGESTLOG="${LOGDIR}/${FULL_OUTPUT_ID}_capture_options.log"
QCXML="${LOGDIR}/${FULL_OUTPUT_ID}.${EXTENSION}.qctools.xml.gz"
QCLI_COMMAND_PIPE=(qcli -f signalstats+aphasemeter+astats+ssim -i - -o "${QCXML}")
QCLI_COMMAND_FILE=(qcli -f signalstats+aphasemeter+astats+ssim -i "${VRECORD_OUTPUT}" -o "${QCXML}")
touch "${INGESTLOG}"
_writeingestlog "computer_name" "$(uname -n)"
_writeingestlog "computer_model_name" "${COMPUTER_MODEL_NAME}"
if [[ "${OS_TYPE}" = "macOS" ]] ; then
    _writeingestlog "computer_model_id" "${COMPUTER_MODEL_ID}"
    _writeingestlog "computer_processor_name" "${COMPUTER_PROCESSOR_NAME}"
    _writeingestlog "computer_processor_speed" "${COMPUTER_PROCESSOR_SPEED}"
    _writeingestlog "computer_processor_count" "${COMPUTER_PROCESSOR_COUNT}"
    _writeingestlog "computer_memory" "${COMPUTER_MEMORY}"
    _writeingestlog "computer_serial" "${COMPUTER_SERIAL}"
fi
_writeingestlog "computer_cores" "$CORE_COUNT"
_writeingestlog "user_name" "$(whoami)"
_writeingestlog "operating_system_VERSION" "$(uname -v)"
_writeingestlog "vrecord version" "${VERSION}"
_writeingestlog "datetime_start" "$(_get_iso8601)"

MOUNT_PATH="$(df -Ph "${DIR}" | tail -n 1 | awk '{print $6}')"
if [[ "${OS_TYPE}" = "macOS" ]] ; then
    VOLUME_INFO="$(diskutil info "${MOUNT_PATH}")"
    PART_OF_WHOLE="/dev/$(_parse_report "Part of Whole" "${VOLUME_INFO}")"
    CAPTURE_DEVICE_INFO="$(diskutil info "${PART_OF_WHOLE}")"

    _writeingestlog "capture_device_node" "$(_parse_report "Device Node" "${CAPTURE_DEVICE_INFO}")"
    _writeingestlog "capture_device_protocol" "$(_parse_report "Protocol" "${CAPTURE_DEVICE_INFO}")"
    _writeingestlog "capture_device_name" "$(_parse_report "Device / Media Name" "${CAPTURE_DEVICE_INFO}")"
    _writeingestlog "capture_device_block_size" "$(_parse_report "Device Block Size" "${CAPTURE_DEVICE_INFO}")"
    _writeingestlog "capture_device_location" "$(_parse_report "Device Location" "${CAPTURE_DEVICE_INFO}")"
    _writeingestlog "capture_device_partition_type" "$(_parse_report "Partition Type" "${VOLUME_INFO}")"
    _writeingestlog "capture_device_partition_name" "$(_parse_report "Name (User Visible)" "${VOLUME_INFO}")"
    _writeingestlog "capture_device_volume_uuid" "$(_parse_report "Volume UUID" "${VOLUME_INFO}")"
    _writeingestlog "capture_device_volume_available" "$(_parse_report "Volume Available Space" "${VOLUME_INFO}")"
    _writeingestlog "capture_device_volume_total" "$(_parse_report "Volume Total Space" "${VOLUME_INFO}")"
fi

_writeingestlog "FILE_PATH" "${VRECORD_OUTPUT}"

if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] ; then
    if [[ -n "${VIDEO_CARD_DRIVER_VERSION}" ]] ; then
        _writeingestlog "video_card_driver_version" "${VIDEO_CARD_DRIVER_VERSION}"
    fi
    _writeingestlog "video_card_name" "${DECKLINK_INPUT_CHOICE}"
fi

echo -e "${LOG_OF_OPTIONS}" >> "${INGESTLOG}"
if [[ -n "${TECHNICIAN}" ]] ; then
    _writeingestlog "TECHNICIAN" "${TECHNICIAN}"
fi
if [[ "${INVERT_PHASE}" = 1 ]] ; then
    _writeingestlog "INVERT_PHASE" "Yes"
fi
if [[ -n "${EXTRAINPUTOPTIONS[@]}" ]] ; then
    _writeingestlog "EXTRA_INPUT_OPTIONS" "${EXTRAINPUTOPTIONS[@]}"
fi
if [[ -n "${EXTRAOUTPUTOPTIONS[@]}" ]] ; then
    _writeingestlog "EXTRA_OUTPUT_OPTIONS" "${EXTRAOUTPUTOPTIONS[@]}"
fi

_report -d "Close the playback window to stop recording."

# vrecord process!
_setup_vrecord_process
if [[ "${VRECORD_STEPS}" = "2" ]] ; then
    _writeingestlog "Capture-Record command" "${RECORD_COMMAND[@]}"
    _writeingestlog "Playback command" "${PLAYER_COMMAND[@]}"
    "${RECORD_COMMAND[@]}" 2> >(tee "${VRECORD_INPUT_TMP}" 1>&2) | \
    if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] && [[ "${QCTOOLSXML_CHOICE}" = "Yes, concurrent with recording" ]]; then
        tee >("${PLAYER_COMMAND[@]}") | "${QCLI_COMMAND_PIPE[@]}"
    else
        "${PLAYER_COMMAND[@]}"
    fi
elif [[ "${VRECORD_STEPS}" = "3" ]] ; then
    _writeingestlog "Capture command" "${RECORD_COMMAND[@]}"
    _writeingestlog "Record command" "${FF_RECORD_COMMAND[@]}"
    _writeingestlog "Playback command" "${PLAYER_COMMAND[@]}"
    "${RECORD_COMMAND[@]}" 2> >(tee "${VRECORD_INPUT_TMP}" 1>&2) | \
    "${FF_RECORD_COMMAND[@]}" 2> >(tee "${VRECORD_INPUT_TMP}" 1>&2) | \
    if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] && [[ "${QCTOOLSXML_CHOICE}" = "Yes, concurrent with recording" ]]; then
        tee >("${PLAYER_COMMAND[@]}") | "${QCLI_COMMAND_PIPE[@]}"
    else
        "${PLAYER_COMMAND[@]}"
    fi
else
    _report_unexpected_error VRECORD_STEPS
fi
# capture errors from components of recording pipe
RESULTING_EXIT_CODES=("${PIPESTATUS[@]}")
P1_ERR="${RESULTING_EXIT_CODES[0]}"
P2_ERR="${RESULTING_EXIT_CODES[1]}"
P3_ERR="${RESULTING_EXIT_CODES[2]}"

if [[ "${VRECORD_STEPS}" = "2" ]] ; then
    _writeingestlog "Capture-Record exit code" "${P1_ERR}"
    _writeingestlog "Playback exit code" "${P2_ERR}"
elif [[ "${VRECORD_STEPS}" = "3" ]] ; then
    _writeingestlog "Capture exit code" "${P1_ERR}"
    _writeingestlog "Record exit code" "${P2_ERR}"
    _writeingestlog "Playback exit code" "${P3_ERR}"
fi

if [[ ! -s "${VRECORD_OUTPUT}" ]] ; then
    if [[ "$P1_ERR" != "0" ]] ; then
        _report_unexpected_error P1_ERR "${RECORD_COMMAND[@]} // ${FF_RECORD_COMMAND[@]} // ${PLAYER_COMMAND}"
    fi
    if [[ "$P2_ERR" != "0" && ! -z "$P2_ERR" ]] ; then
        _report_unexpected_error P2_ERR "${RECORD_COMMAND[@]} // ${FF_RECORD_COMMAND[@]} // ${PLAYER_COMMAND}"
    fi
    if [[ "$P3_ERR" != "0" && ! -z "$P3_ERR" ]] ; then
        _report_unexpected_error P3_ERR "${RECORD_COMMAND[@]} // ${FF_RECORD_COMMAND[@]} // ${PLAYER_COMMAND}"
    fi
fi

mv "${VRECORD_INPUT_TMP}" "${FULL_CAPTURE_LOG}"
_writeingestlog "datetime_end" "$(_get_iso8601)"
trap _cleanup SIGHUP SIGINT SIGTERM

if [[ "${DEVICE_INPUT_CHOICE}" = 0 ]] ; then
    # timecode document handling
    if [[ -f "${TC_TMP}" ]] ; then
        mv "${TC_TMP}" "${LOGDIR}/${FULL_OUTPUT_ID}_${TC_TYPE}${TIMECODELOGSUFFIX}"
    fi

    # qc tools process
    if [[ "${QCTOOLSXML_CHOICE}" = "Yes, after recording" ]] ; then
        "${QCLI_COMMAND_FILE[@]}"
    fi
    if [[ "${QCTOOLSXML_CHOICE}" != "No" ]] ; then
        _report -d "Vrecord is analyzing your video file. Please be patient."
        if [[ -s "${QCXML}" ]] ; then
            if [[ "${PIXEL_FORMAT}" = "yuv422p10" ]] ; then
                SAT_OUTLIERS=$("${ZCAT_COMMAND}" "${QCXML}" | perl -nle 'print if not m{lavfi.(?!signalstats.SATMAX)}' | xmlstarlet sel -t -v "count(//tag[@key='lavfi.signalstats.SATMAX'][@value>496])" -n)
            elif [[ "${PIXEL_FORMAT}" = "uyvy422" ]] ; then
                SAT_OUTLIERS=$("${ZCAT_COMMAND}" "${QCXML}" | perl -nle 'print if not m{lavfi.(?!signalstats.SATMAX)}' | xmlstarlet sel -t -v "count(//tag[@key='lavfi.signalstats.SATMAX'][@value>124])" -n)
            fi
            AUD_OUTLIERS=$("${ZCAT_COMMAND}" "${QCXML}" | perl -nle 'print if not m{lavfi.(?!astats.Overall.Peak_level)}' | grep -v "tag key=\"lavfi.[^a]" | xmlstarlet sel -t -v "count(//tag[@key='lavfi.astats.Overall.Peak_level'][@value>=-0.01])" -n)
            BRNG_OUTLIERS=$("${ZCAT_COMMAND}" "${QCXML}" | perl -nle 'print if not m{lavfi.(?!signalstats.BRNG)}' | xmlstarlet sel -t -v "count(//tag[@key='lavfi.signalstats.BRNG'][@value>=0.03])" -n)
            AUDIO_PEAK=$("${ZCAT_COMMAND}" "${QCXML}" | grep lavfi.astats.Overall.Peak_level | cut -d '"' -f 4 | sort -n | tail -n 1)
            _writeingestlog "Peak Volume is (dB)" "${AUDIO_PEAK}"
            if "$GNUPLOT_INSTALLED" && "$QCLI_INSTALLED" ; then
                _report -d "Vrecord is generating graphs from the QCTools data. One moment please."
                _qcgraphimage "${QCXML}"
            fi
        else
            _report -w "qctools XML ${QCXML} is empty or does not exist!"
        fi
        if [[ "${SAT_OUTLIERS}" -gt "${SAT_OUTLIER_THRSHLD}" ]] ; then
            cowsay "$(_report -w "WARNING: Your video file contains ${SAT_OUTLIERS} frames with illegal saturation values. Your deck may require cleaning.")"
        fi
        if [[ "${AUD_OUTLIERS}" -gt "${AUD_OUTLIER_THRSHLD}" ]] ; then
            cowsay "$(_report -w "WARNING: Your video file contains ${AUD_OUTLIERS} frames with clipped audio levels.")"
        fi
        if [[ "${BRNG_OUTLIERS}" -gt "${BRNG_OUTLIER_THRSHLD}" ]] ; then
            cowsay "$(_report -w "WARNING: Your video file contains ${BRNG_OUTLIERS} frames with pixels out of broadcast range.")"
        fi
        _report -d "QCTools analysis is complete."
    fi

    # check for discontinuities in the Frame MD5s; if user chose not to use Frame MD5s, check for frame discontinuties in the FFmpeg file
    if [[ "${FRAMEMD5_CHOICE}" = "Yes" ]] ; then
        PTS_DISCONTINUITY=$(cat "${FRAMEMD5NAME}" | grep -v "^#" | cut -d, -f3 | sed 's/ //g' | grep -v "^0$" | awk '{if($1!=p+1){if(p+1==$1-1){printf p+1" "}else{printf p+1"-"$1-1" "}}{p=$1}}')
        if [[ -z "${PTS_DISCONTINUITY}" ]] ; then
            _writeingestlog "PTS_DISCONTINUITY" "none"
        else
            _writeingestlog "PTS_DISCONTINUITY" "${PTS_DISCONTINUITY}"
            cowsay "$(_report -w "WARNING: There were presentation timestamp discontinuities in the file's frame MD5s for these frame ranges: ${PTS_DISCONTINUITY}. This error may indicate frames dropped by FFmpeg or vrecord. The file may have sync issues.")"
        fi
    elif [[ "${FRAMEMD5_CHOICE}" = "No" ]] ; then
        FRAMES_ENCODED=$(cat "${LOGDIR}/${FULL_OUTPUT_ID}"_ffmpeg_input.log | grep -w "frames encoded" | awk '{print $10}' | grep -m 1 [0-9])
        FRAMES_DECODED=$(cat "${LOGDIR}/${FULL_OUTPUT_ID}"_ffmpeg_input.log | grep -w "frames decoded" | awk '{print $10}' | grep -m 1 [0-9])
        if [[ "${FRAMES_ENCODED}" -lt $((FRAMES_DECODED-1)) ]] ; then
            FRAMES_DISCREPANCY=$((FRAMES_DECODED-FRAMES_ENCODED))
            cowsay "$(_report -w "WARNING: There were presentation timestamp discontinuities found in the framemd5s. This error may indicate frames dropped by FFmpeg or vrecord. The file may have sync issues.")"
            _writeingestlog "ffmpeg_missing_frames" "${FRAMES_DISCREPANCY}"
        else
            _writeingestlog "ffmpeg_missing_frames" "None"
        fi
    fi

    # check for frames dropped in ffmpeg_input.log
    DROPPED_FRAMES_INSTANCES=$(grep -c "Frames dropped" "${FULL_CAPTURE_LOG}")
    DROPPED_FRAMES_FRAMENUMBERS=$(grep "Frames dropped" "${FULL_CAPTURE_LOG}" | awk '{print $6}' | sed 's/[(#)]//g')
    if [[ "${DROPPED_FRAMES_INSTANCES}" -gt 0 ]] ; then
        cowsay "$(_report -w "WARNING: FFmpeg Decklink input reported dropped frames in the following ${DROPPED_FRAMES_INSTANCES} locations. This error may indicate an interrupted signal between hardware components. The file may be missing content. With decklink inputs, this cow recommends reviewing your settings in Desktop Video Setup and setting the video and audio inputs to match what those set in vrecord.")"
        for i in ${DROPPED_FRAMES_FRAMENUMBERS} ; do # do not quote this variable
            DROPPED_FRAMES_TIMESTAMPS+="$(_frames_to_hhmmss "${i}") "
        done
        _report -w "Dropped frames timestamps: ${DROPPED_FRAMES_TIMESTAMPS}"
        _writeingestlog "DROPPED_FRAMES_TIMESTAMPS" "${DROPPED_FRAMES_TIMESTAMPS}"
    fi

    # check for input buffer overrun error
    BUFFER_OVERRUN=$(grep -c "Decklink input buffer overrun" "${FULL_CAPTURE_LOG}")
    if [[ "${BUFFER_OVERRUN}" -gt 0 ]] ; then
        cowsay "$(_report -w "WARNING: FFmpeg Decklink input reported a buffer overrun. The file is likely missing frames or contains artifacts from the buffer overrun.")"
        _writeingestlog "Decklink input buffer overrun" "Yes"
    fi

    # policy checks with mediaconch
    if "$MEDIACONCH_INSTALLED" ; then
        if [[ "${VIDEO_CODEC_CHOICE}" = "Uncompressed Video" ]] ; then
            _report -d "Checking file conformance against uncompressed video policy..."
            STATUS=$(mediaconch -fx -p "${RESOURCE_PATH}/vrecord_policy_uncompressed.xml" "${VRECORD_OUTPUT}" | xmlstarlet sel -N mc="https://mediaarea.net/mediaconch" -t -v mc:MediaConch/mc:media/mc:policy/@outcome -n)
            if [[ "$STATUS" = "pass" ]] ; then
                _report -dt "File passed policy check for uncompressed video."
            elif [[ "$STATUS" = "fail" ]] ; then
                _report -wt "File did not pass vrecord policy check for uncompressed video and may not conform to digital preservation standards. Try another file?"
                mediaconch -fx -p "${RESOURCE_PATH}/vrecord_policy_uncompressed.xml" "${VRECORD_OUTPUT}" | xmlstarlet fo > "${DIR}/${FULL_OUTPUT_ID}_mediaconchreport.xml"
                _report -wt "See ${DIR}/${ID}${SUFFIX}_mediaconchreport.xml for a full MediaConch policy report."
            else
                mediaconch -p "${RESOURCE_PATH}/vrecord_policy_uncompressed.xml" "${VRECORD_OUTPUT}"
            fi
        elif [[ "${VIDEO_CODEC_CHOICE}" = "FFV1 version 3" ]] ; then
            _report -d "Checking file conformance against FFV1 video policy..."
            STATUS=$(mediaconch -fx -p "${RESOURCE_PATH}/vrecord_policy_ffv1.xml" "${VRECORD_OUTPUT}" | xmlstarlet sel -N mc="https://mediaarea.net/mediaconch" -t -v mc:MediaConch/mc:media/mc:policy/@outcome -n)
            if [[ "${STATUS}" = "pass" ]] ; then
                _report -dt "File passed policy check for FFV1 video."
            elif [[ "$STATUS" = "fail" ]] ; then
                _report -wt "File did not pass vrecord policy check for FFV1 video and may not conform to digital preservation standards. Try another file?"
                mediaconch -fx -p "${RESOURCE_PATH}/vrecord_policy_ffv1.xml" "${VRECORD_OUTPUT}" | xmlstarlet fo > "${DIR}/${FULL_OUTPUT_ID}_mediaconchreport.xml"
                _report -wt "See ${DIR}/${ID}${SUFFIX}_mediaconchreport.xml for a full MediaConch policy report."
            else
                mediaconch -p "${RESOURCE_PATH}/vrecord_policy_ffv1.xml" "${VRECORD_OUTPUT}"
            fi
        fi
    fi

    # embed logs in Matroska files
    if "$MKVPROPEDIT_INSTALLED" ; then
        if [[ "${CONTAINER_CHOICE}" = "Matroska" ]] && [[ "${EMBED_LOGS_CHOICE}" = "Yes" ]] ; then
            _report -d "Vrecord is attaching logs to your Matroska file:"
            mkvpropedit "${VRECORD_OUTPUT}" --attachment-description "Capture options selected by user during vrecord process" --add-attachment "${INGESTLOG}"
            mkvpropedit "${VRECORD_OUTPUT}" --attachment-description "Full FFmpeg output from vrecord capture process" --add-attachment "${FULL_CAPTURE_LOG}"
            if [[ "${QCTOOLSXML_CHOICE}" = "Yes" ]] ; then
                mkvpropedit "${VRECORD_OUTPUT}" --attachment-description "QCTools report from vrecord capture process (zipped XML)" --add-attachment "${QCXML}"
            fi
            _report -d "Vrecord is done attaching logs to your Matroska file!"
        fi
    fi
fi
